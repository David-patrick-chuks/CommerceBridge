# CommerceBridge - AI Development Guidelines

## Project Overview
CommerceBridge is a **WhatsApp-first e-commerce platform** where customers and sellers interact entirely through a smart chatbot interface. The bot serves as the middleman, handling all transactions and communications without direct contact between customers and sellers.

**Core Concept**: Everything happens in WhatsApp - browsing products, ordering, payments, seller management - except account creation which uses a web link.

## Technology Stack
- **Frontend**: React.js with TypeScript (for account creation web interface only)
- **Backend**: Node.js with TypeScript
- **Database**: PostgreSQL, MongoDB
- **WhatsApp Integration**: WhatsApp Web JS (primary interface)
- **Payment**: Paystack
- **Additional**: Firebase (for real-time features)

## Code Standards & Conventions

### TypeScript Guidelines
- Use strict TypeScript configuration
- Define proper interfaces for all data structures
- Use type guards for runtime type checking
- Prefer `interface` over `type` for object shapes
- Use enums for constants and status values

### Chatbot Development Guidelines
- Design conversation flows as state machines
- Implement proper session management
- Use natural language processing for intent recognition
- Create reusable response templates
- Handle edge cases and error recovery gracefully
- Generate and send digital receipts as images after payment
- Implement customer support escalation to human agents
- Collect customer feedback and ratings after order completion
- Support multi-language conversations
- Ensure accessibility for all users (including screen reader-friendly messages and images)

### API & Backend Guidelines
- Use Express.js with TypeScript
- Implement proper middleware for authentication
- Use JWT for session management
- Implement rate limiting for WhatsApp API calls
- Use proper error handling and logging

### Database Guidelines
- Use migrations for schema changes
- Implement proper indexing for performance
- Use transactions for critical operations
- Implement soft deletes where appropriate

## Architecture Patterns

### Chatbot Architecture
- Use state machine pattern for conversation flows
- Implement session persistence across restarts
- Use event-driven architecture for message handling
- Implement proper error recovery mechanisms
- Create modular conversation handlers

### Backend Architecture
- Use service layer pattern
- Implement repository pattern for data access
- Use dependency injection
- Implement proper validation middleware

## Security Requirements
- Implement end-to-end encryption for transactions
- Use HTTPS for all communications
- Implement proper input validation
- Use environment variables for sensitive data
- Implement proper authentication and authorization

## WhatsApp Integration Guidelines
- Handle WhatsApp Web JS connection states
- Implement proper message queuing
- Use webhook endpoints for real-time updates
- Implement proper error handling for API limits
- Cache frequently accessed data
- Design conversation flows for WhatsApp limitations

## Payment Integration Guidelines
- Use Paystack SDK for payment processing
- Implement proper webhook handling
- Use secure payment verification
- Implement proper error handling for failed payments
- Store payment references securely

## Testing Strategy
- Write unit tests for business logic
- Implement integration tests for API endpoints
- Use mock services for external APIs
- Test WhatsApp integration thoroughly
- Implement end-to-end tests for critical flows
- Test conversation flows and edge cases

## Performance Considerations
- Implement proper caching strategies
- Optimize database queries
- Use CDN for static assets
- Implement proper image optimization
- Monitor API response times
- Optimize chatbot response times

## Error Handling
- Implement proper error logging
- Use structured error responses
- Implement retry mechanisms for external APIs
- Provide user-friendly error messages
- Monitor and alert on critical errors
- Handle WhatsApp connection failures gracefully

## Development Workflow
- Use feature branches for development
- Implement proper code review process
- Use conventional commits
- Maintain proper documentation
- Regular security audits

## File Organization
```
src/
├── chatbot/           # WhatsApp bot logic
│   ├── flows/         # Conversation flows
│   ├── handlers/      # Message handlers
│   ├── sessions/      # Session management
│   └── templates/     # Response templates
├── components/        # React components (web interface)
├── hooks/            # Custom React hooks
├── services/         # API and external service integrations
├── utils/            # Utility functions
├── types/            # TypeScript type definitions
├── constants/        # Application constants
├── contexts/         # React contexts
└── pages/            # Page components (web interface)
```

## Naming Conventions
- Use PascalCase for components and classes
- Use camelCase for functions and variables
- Use UPPER_SNAKE_CASE for constants
- Use kebab-case for file names
- Use descriptive names that explain purpose

## Documentation Requirements
- Document all API endpoints
- Maintain up-to-date README
- Document complex business logic
- Keep architecture decisions recorded
- Document deployment procedures
- Document conversation flows and bot behavior

## Priority Guidelines
When implementing features, prioritize:
1. WhatsApp bot core functionality (MVP)
2. E-commerce features via chatbot
3. Payment processing integration
4. Order management through chat
5. Analytics and reporting
6. Web interface for account creation

## Code Review Checklist
- [ ] TypeScript types are properly defined
- [ ] Error handling is implemented
- [ ] Security considerations are addressed
- [ ] Performance impact is considered
- [ ] Tests are written for new functionality
- [ ] Documentation is updated
- [ ] Code follows established patterns
- [ ] Conversation flows are tested
- [ ] WhatsApp integration is properly handled 

## Seller Tools Guidelines
- Implement sales and inventory alerts for sellers
- Allow promotional broadcasts to customer lists (with opt-in)
- Support multi-store management for sellers
- Send analytics snapshots to sellers via WhatsApp

## Compliance & Trust
- Implement privacy controls for user data
- Provide verified business badges for trusted sellers 